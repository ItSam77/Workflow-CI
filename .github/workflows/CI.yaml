name: MLflow Project CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  mlflow-pipeline:
    runs-on: ubuntu-latest
    
    env:
      MLFLOW_TRACKING_URI: "file:./mlruns"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python 3.12.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.7'
    
    - name: Check Env
      run: |
        python --version
        pip --version
        
    - name: Install dependencies
      run: |
        pip install -r MLProject/requirements.txt
        pip install imbalanced-learn
        
    - name: Run mlflow project
      run: |
        cd MLProject
        # Run the main modelling script (now CI-aware)
        python modelling.py
        
    - name: Get latest MLflow run_id
      run: |
        cd MLProject
        python -c "
        import os
        import json
        
        # Check if mlruns directory exists
        if os.path.exists('mlruns'):
            # Find the latest run
            experiments = [d for d in os.listdir('mlruns') if d.isdigit()]
            if experiments:
                latest_exp = max(experiments)
                runs_path = f'mlruns/{latest_exp}'
                if os.path.exists(runs_path):
                    runs = [d for d in os.listdir(runs_path) if d != 'meta.yaml']
                    if runs:
                        latest_run = max(runs, key=lambda x: os.path.getctime(f'{runs_path}/{x}'))
                        print(f'Latest MLflow run ID: {latest_run}')
                        
                        # Read run metrics if available
                        metrics_path = f'{runs_path}/{latest_run}/metrics'
                        if os.path.exists(metrics_path):
                            print('Model Metrics:')
                            for metric_file in os.listdir(metrics_path):
                                with open(f'{metrics_path}/{metric_file}', 'r') as f:
                                    lines = f.readlines()
                                    if lines:
                                        value = lines[-1].split()[1]  # Get latest value
                                        print(f'  {metric_file}: {value}')
                    else:
                        print('No runs found')
                else:
                    print('No experiments found')
            else:
                print('MLflow tracking not initialized')
        else:
            print('MLruns directory not found')
        "
    
    - name: Saving artifact to GitHub Actions
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-run-itsam77
        path: MLProject/mlruns

    - name: Get latest model path
      id: model_path
      run: |
        cd MLProject
        MODEL_PATH=$(python -c "
        import os
        import mlflow
        
        mlflow.set_tracking_uri('file:./mlruns')
        experiment = mlflow.get_experiment_by_name('Attrition_Models')
        
        if experiment:
            runs = mlflow.search_runs(experiment_ids=[experiment.experiment_id], order_by=['start_time DESC'], max_results=1)
            if not runs.empty:
                latest_run_id = runs.iloc[0]['run_id']
                model_path = f'mlartifacts/{experiment.experiment_id}/{latest_run_id}/artifacts/model'
                print(model_path)
            else:
                print('No runs found')
                exit(1)
        else:
            print('Experiment not found')
            exit(1)
        ")
        echo "model_path=$MODEL_PATH" >> $GITHUB_OUTPUT
        echo "Latest model path: $MODEL_PATH"

    - name: Build Docker image with MLflow
      run: |
        cd MLProject
        mlflow models build-docker -m ${{ steps.model_path.outputs.model_path }} -n ${{ secrets.DOCKER_USERNAME }}/mlflow-run-itsam77:${{ github.run_id }}
        docker tag ${{ secrets.DOCKER_USERNAME }}/mlflow-run-itsam77:${{ github.run_id }} ${{ secrets.DOCKER_USERNAME }}/mlflow-run-itsam77:latest

    - name: Log into Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/mlflow-run-itsam77:${{ github.run_id }}
        docker push ${{ secrets.DOCKER_USERNAME }}/mlflow-run-itsam77:latest

            
            
        
